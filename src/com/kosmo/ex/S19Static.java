package com.kosmo.ex;

public class S19Static {
    /*
## 📘 수업 정리: `static` 변수 (클래스 변수) vs 인스턴스 변수

### 1. `static` 변수란?

* `static`으로 선언된 변수는 **객체가 아닌 클래스에 속한 변수**
* 클래스가 로딩될 때 **JVM의 메서드 영역**에 1회만 생성됨
* **모든 인스턴스가 이 변수 하나를 공유**
* 객체 생성 없이 `ClassName.variable` 방식으로 접근 가능
* 보통 **공용 상수**나 **공통 정보**를 저장할 때 사용

```java
static int count = 0;  // 클래스 변수
```

---

### 2. 인스턴스 변수와 비교

| 구분    | 클래스 변수 (`static`)    | 인스턴스 변수 (non-static) |
| ----- | -------------------- | -------------------- |
| 소속    | 클래스 전체               | 객체(인스턴스)             |
| 메모리   | 메서드 영역               | 힙 영역                 |
| 생성 시점 | 클래스 로딩 시             | 객체 생성 시              |
| 접근 방법 | 클래스명.변수명 또는 참조변수.변수명 | 참조변수.변수명             |
| 공유 여부 | 모든 객체가 **공유**        | 객체마다 **별도 보유**       |

---

### 3. 실습 코드 주요 내용

```java
Student student1 = new Student("홍길동");
Student student2 = new Student("고길동");

++Student.count;        // 클래스 변수 증가
++student2.cnt;         // 인스턴스 변수 증가 (student2에만 영향)
```

* `Student.count`는 클래스 전체가 공유
* `cnt`는 객체마다 따로 존재 (독립된 값)

---

### 4. 클래스 변수의 용도

* **상수 정의에 적합**
  예: `Math.PI`, `Integer.MAX_VALUE`
* **전체 객체의 수를 세는 용도**
  예: `Student.count++`
* **설정값이나 환경 설정 공유**

> 하지만, 객체마다 달라야 하는 정보(예: 점수, 이름 등)는 **절대 static으로 선언하면 안 됨** → 인스턴스 변수로 선언해야 함

---

### 5. 클래스 변수 사용 예시

```java
System.out.println(Student.count);       // 클래스 변수는 클래스명으로 접근
System.out.println(Math.PI);             // 대표적인 클래스 변수 (상수)
```

---

### 6. 기타 주의사항

* `static` 변수는 **인스턴스 생성 없이 접근 가능**하지만,
  `new 객체().static변수` 형태의 접근은 **가능하나 권장되지 않음**
* 클래스 변수는 **전역 공유 변수**이므로 **데이터 무결성을 신중히 고려해야 함**

---

### 7. Arrays 클래스와 static 메서드

```java
System.out.println(Arrays.toString(arr));
```

* `Arrays.toString()`은 `Arrays` 클래스에 정의된 **static 메서드**
* `Arrays` 클래스는 객체 생성 없이도 사용 가능

---

## 📘 자바 메모리 구조 핵심 정리 (Stack 제외)

```
[클래스 로딩 및 실행 구조 요약]

1. 컴파일된 .class 파일 → JVM이 로딩
2. 클래스 로더가 메서드 영역에 클래스 정의를 적재
3. static 변수와 메서드 코드도 메서드 영역에 저장
4. new로 객체 생성 시 힙에 인스턴스 생성
```

---

### 1. 클래스 로더 (Class Loader)

* `.class` 파일을 읽어 **JVM 메모리에 로딩**함
* 클래스의 **이름, 메서드, 필드, 상수 정보** 등을 JVM에 전달
* 한 번 로딩된 클래스는 JVM이 종료될 때까지 유지

---

### 2. 메서드 영역 (Method Area)

* 클래스 로더가 읽어들인 클래스의 **정의 정보**를 저장
* `static` 변수, `final` 상수, 메서드 코드(바이트코드), 인터페이스 정보 등 포함
* 클래스당 1개 생성 (객체가 아무리 많아도 1개)
* 예시:

  ```java
  class Student {
      static int count = 0;
      int score;
  }
  ```

  → `count`는 메서드 영역에 저장됨
  → `score`는 힙에 저장됨 (객체 생성 시)

---

### 3. 힙 메모리 (Heap)

* `new` 키워드로 생성한 객체 인스턴스가 저장되는 영역

* 예:

  ```java
  Student s1 = new Student();
  Student s2 = new Student();
  ```

  → `s1`, `s2` 각각은 힙에 별도의 인스턴스를 가짐
  → 이 인스턴스들은 **서로 다른 필드 값을 가짐**

* JVM이 자동으로 관리하며, 사용되지 않는 객체는 **GC(Garbage Collector)** 가 수거

---

### 🔁 메서드 영역 vs 힙 메모리 비교

| 항목      | 메서드 영역                    | 힙 메모리            |
| ------- | ------------------------- | ---------------- |
| 저장 대상   | 클래스 정보, static 변수, 메서드 코드 | new로 생성된 객체 인스턴스 |
| 생성 시점   | 클래스가 로딩될 때                | 객체가 생성될 때        |
| 소멸 시점   | JVM 종료 시                  | GC에 의해 자동 제거     |
| 객체와의 관계 | 모든 객체가 공유                 | 객체마다 독립적         |

---

### 🔎 요약

* `static`은 객체와 무관하게 **클래스 자체에 소속된 데이터**
* `new`는 힙에 **독립적인 객체 인스턴스 생성**
* 메서드 영역은 **공통 정보**, 힙 메모리는 **개별 데이터**

class A{
     int a;
     static int b; // new A() 관련이 없는 독립적인 존재 로 호출 시 클래스명+필드명(ex ++A.b)

---

## 📘 자바 메모리 구조 관련 문제 (스택 제외)

### \[객관식 문제] (1\~6)

1. 다음 중 `static` 변수에 대한 설명으로 올바른 것은? C번

   A. 객체가 생성될 때마다 메모리에 새로 생성된다
   B. 클래스 로더에 의해 힙 메모리에 저장된다
   C. 클래스가 로딩될 때 메서드 영역에 저장된다
   D. 오직 하나의 객체에서만 접근 가능하다

---

2. 다음 중 힙 메모리에 저장되는 항목은? D번

   A. static 변수
   B. 메서드 코드
   C. 지역 변수
   D. new 키워드로 생성된 객체

---

3. 클래스가 처음 참조될 때 JVM이 수행하는 작업으로 옳은 것은? C번

   A. 객체를 메서드 영역에 생성한다
   B. static 메서드를 힙에 올린다
   C. 클래스 정보를 메서드 영역에 적재한다
   D. new 없이도 인스턴스를 생성한다

---

4. 다음 중 `new` 키워드를 사용할 때 발생하는 동작은? D번

   A. static 메서드가 실행된다
   B. 클래스 로더가 작동한다
   C. 객체가 메서드 영역에 저장된다
   D. 객체가 힙에 생성된다

---

5. 다음 중 메서드 영역에 저장되지 않는 항목은? C번

   A. 클래스 이름
   B. static 필드
   C. 지역 변수
   D. 메서드 바이트코드

---

6. `Student` 클래스를 여러 번 `new`로 생성하면, 다음 중 항상 하나만 존재하는 것은? B번

   A. 각 객체의 `score` 필드
   B. `Student` 클래스의 `count` static 변수
   C. 각 객체의 `name` 필드
   D. `Student` 객체가 저장된 힙 주소

---


*/
}
