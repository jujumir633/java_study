package com.kosmo;

public class L18JavaCopile {
    /*

## 자바 컴파일 언어 구조 및 클래스 관련 수업 정리

### 1. 자바는 컴파일 언어

* 자바 코드는 `.java` 파일에 작성되고, `javac` 컴파일러로 `.class` 파일(바이트코드)로 변환됨
* 컴파일 시 문법 오류를 미리 잡아주는 **정적 타입 기반 컴파일 언어**

```bash
javac MyClass.java → MyClass.class 생성
```

---

### 2. 바이트코드와 JVM

* `.class` 파일은 **운영체제에서 직접 실행되지 않음**
* JVM(Java Virtual Machine)이 바이트코드를 읽고 실행
* JVM은 명령어를 해석하거나, JIT(Just-In-Time) 컴파일을 통해 기계어로 변환해 실행

---

### 3. 클래스 단위의 분리 컴파일

* 하나의 `.java` 파일에 여러 클래스를 선언할 수 있지만,
  컴파일 시 클래스마다 별도의 `.class` 파일이 생성됨
* 이로 인해 같은 패키지 안에서는 클래스 이름이 중복될 수 없음
  → 클래스명이 중복되면 컴파일 에러 발생

---

### 4. 패키지와 접근 제한자 (`public`)

* 클래스가 `public` 이 아니면 같은 패키지 안에서만 접근 가능
* 다른 패키지에서 사용하려면 `public class`로 선언되어야 함
* 외부 클래스가 `public`이더라도, `.java` 파일 이름과 클래스 이름이 반드시 일치해야 함

---

### 5. `main()` 메서드는 프로그램의 시작점

* 자바 프로그램 실행 시 JVM은 `public static void main(String[] args)`를 찾아 실행
* `main()`이 포함된 클래스는 **자바 응용프로그램의 진입점(entry point)**

---

### 6. 단일 스레드 실행 구조

* 자바 애플리케이션은 기본적으로 **하나의 main 스레드**에서 실행됨
* 명령문은 순서대로 실행되며, 따로 스레드를 만들지 않으면 **직렬 실행(single-thread)**

---

### 요약

| 항목         | 내용                               |
| ---------- | -------------------------------- |
| 컴파일 언어     | `.java` → `.class` (정적 타입 검증 포함) |
| 실행 방식      | JVM에서 바이트코드 해석 or JIT 컴파일        |
| 클래스 분리 컴파일 | 각 클래스마다 개별 `.class` 파일 생성        |
| 패키지 구조     | `public` 클래스만 외부에서 접근 가능         |
| 클래스 이름 중복  | 같은 패키지 내에서는 불가                   |
| main()     | 실행 시작점, static으로 선언              |
| 실행 구조      | 단일 스레드(main)에서 순차 실행             |

    * */
}
